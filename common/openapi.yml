openapi: 3.0.3
info:
  title: Terra Policy Service
  description: |
    Terra Policy Service
    See https://docs.google.com/document/d/1dRtE_nZf8e231DZmk_-9CDbjYTiIN2ZZwI95uF1w2pg/edit#heading=h.1uc5ubqdd419
    for design information

  version: 0.0.1
paths:
  # Unauthenticated Paths
  /status:
    get:
      security: [ ]
      summary: Returns the operational status of the service
      operationId: serviceStatus
      tags: [ Public ]
      responses:
        '200':
          description: Service can process requests
        '500':
          description: |
            Service cannot process requests. That might be because dependent services are
            unavailable, or because there is a problem with the service itself.

  /version:
    get:
      security: [ ]
      summary: Returns the deployed version of the service
      operationId: serviceVersion
      tags: [ Public ]
      responses:
        '200':
          description: Version properties
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionProperties'

  # Region policy paths
  /api/policies/v1alpha1/region-constraint:
    put:
      summary: Test compliance with region constraint.
      description: |
        The policy service looks for a region constraint attributes in the policy inputs. It resolves to
        a single constraint. Multiple constraints is an error. No constraint is allowed. If a specific
        location is requested, then it will be supplied to the rule evaluation. It is fine to have no
        requested location. There are four possible results:
        1. the request or constraint lead to a specific cloud region where resources should be allocated.
        2. the request or constraint lead to a geographic region. Options for a compliant cloud region are returned.
        3. the request and constraint are in conflict; the action should not be allowed
        4. there is no request or constraint. The action is allowed; policy service provides no help choosing a cloud region.
      operationId: policyRegionConstraint
      tags: [Policy]
      requestBody:
        required: true
        content:
          applicaton/json:
            schema:
              $ref: '#/components/schemas/RegionConstraintRequest'
      responses:
        '200':
          description: Policy evaluted successfully; the answer still may be no
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionConstraintResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

 # Policy Attribute Object Interface (PAO)
  /api/policy/v1alpha1/pao:
    post:
      summary: Create a policy attribute object
      description: |
        A policy attribute object holds the policy attributes for a Terra component object,
        for example, a workspace or a dataset.
      operationId: createPao
      tags: [Pao]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaoCreateRequest'
      responses:
        '204':
          description: Policy attribue created successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/policy/v1alpha1/pao/{objectId}:
    parameters:
      - $ref: '#/components/parameters/ObjectId'
    delete:
      summary: delete a policy attribute object
      operationId: deletePao
      tags: [Pao]
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      summary: retrieve a policy attribute object
      operationId: getPao
      tags: [Pao]
      responses:
        '200':
          description: Policy retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaoGetResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    # Please keep alphabetized
    CloudPlatform:
      type: string
      description: Enum representing a cloud platform type.
      enum: [ 'AZURE', 'GCP' ]

    ErrorReport:
      type: object
      required: [message, statusCode, causes]
      properties:
        message:
          type: string
        statusCode:
          type: integer
        causes:
          type: array
          items:
            type: string

    ObjectId:
      description: UUID format object id referring to an object managed by the Terra component.
      type: string
      format: uuid

    PaoCreateRequest:
      type: object
      required: [objectId, component, objectType]
      properties:
        objectId:
          $ref: '#/components/schemas/ObjectId'
        component:
          $ref: '#/components/schemas/TerraComponent'
        objectType:
          $ref: '#/components/schemas/TerraObjectType'
        attributes:
          $ref: '#/components/schemas/PolicyInputs'

    PaoGetResult:
      type: object
      required: [objectId, component, objectType]
      properties:
        objectId:
          description: UUID format object id referring to an object managed by the Terra component.
          type: string
          format: uuid
        component:
          $ref: '#/components/schemas/TerraComponent'
        objectType:
          $ref: '#/components/schemas/TerraObjectType'
        attributes:
          $ref: '#/components/schemas/PolicyInputs'
        effectiveAttributes:
          $ref: '#/components/schemas/PolicyInputs'
        inConflict:
          type: boolean
        children:
          type: array
          items:
            $ref: '#/components/schemas/ObjectId'

    PolicyInputs:
      type: object
      required: [inputs]
      properties:
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/PolicyInput'

    PolicyInput:
      type: object
      required: [namespace, name]
      properties:
        namespace:
          description: Namespace of the policy input; e.g., 'terra'
          type: string
        name:
          description: Name of the policy input; e.g., 'region-constraint'
          type: string
        additionalData:
          description: Key-value pairs of additional data
          type: array
          items:
            $ref: '#/components/schemas/PolicyPair'

    PolicyPair:
      description: Container for key-value pairs of policy inputs
      type: object
      properties:
        key:
          type: string
        value:
          type: string

    RegionConstraintRequest:
      type: object
      required: [cloudPlatform]
      properties:
        policyInputs:
          description: Policy attributes and other inputs that might relate to the evaluation
          $ref: '#/components/schemas/PolicyInputs'
        regionRequest:
          description: Region to be tested against the constraint, if any
          type: string
        cloudPlatform:
          description: Cloud platform for resolving the region.
          $ref: '#/components/schemas/CloudPlatform'

    RegionConstraintResult:
      type: object
      required: [allowed]
      properties:
        allowed:
          description: Does the requested region comply with the policy constraint
          type: boolean
        cloudRegions:
          description: Set of cloud platform regions available in the requested region. There may be more than one, if the requested region is geographic.
          type: array
          items:
            type: string
        reason:
          description: If not allowed, then why?
          type: string

    TerraComponent:
      type: string
      description: Enum representing a policy-bearing Terra component.
      enum: [ 'WSM' ]

    TerraObjectType:
      type: string
      description: Enum representing an object type of a policy-bearing Terra component.
      enum: [ 'workspace' ]

    VersionProperties:
      type: object
      required: [ gitTag, gitHash, github, build ]
      properties:
        gitTag:
          type: string
          description: Git tag of currently deployed app.
        gitHash:
          type: string
          description: Git hash of currently deployed app.
        github:
          type: string
          description: Github link to currently deployed commit.
        build:
          type: string
          description: Version of the currently deployed app declared in build.gradle. Client and server versions are linked.

  responses:
    # Keep alphabetized please
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'

    Conflict:
      description: Request conflicts with current state
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'

    NotFound:
      description: Not found (or unauthorized)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'

    PermissionDenied:
      description: Permission denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'

    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'

  parameters:
    ObjectId:
      name: objectId
      in: path
      description: A UUID to used to identify a policy attribute object in the TPS
      required: true
      schema:
        $ref: '#/components/schemas/ObjectId'

  securitySchemes:
    authorization:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            openid: open id authorization
            email: email authorization
            profile: profile authorization
    bearerAuth:
      type: http
      scheme: bearer

security:
  - authorization: [ openid, email, profile ]
  - bearerAuth: [ ]
