openapi: 3.0.3
info:
  title: Terra Policy Service
  version: 0.1.0
paths:
  /status:
    get:
      summary: Check status of the service.
      tags: [ public ]
      operationId: getStatus
      security: [ ]
      responses:
        '200':
          description: OK
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/SystemStatusResponse'
  /version:
    get:
      summary: Get version info of the deployed service.
      tags: [ public ]
      operationId: getVersion
      security: [ ]
      responses:
        '200':
          description: Version information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionProperties'
        '404':
          description: "Version not configured"
        '500':
          $ref: '#/components/responses/ServerError'


  ## Policy Attribute Object Interface (PAO) ##
  /api/policy/v1alpha1/pao:
    post:
      summary: Create a policy attribute object
      description: |
        A policy attribute object holds the policy attributes for a Terra component object,
        for example, a workspace or a dataset.
      operationId: createPao
      tags: [Tps]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TpsPaoCreateRequest'
      responses:
        '204':
          description: Policy attribute created successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/policy/v1alpha1/pao/{objectId}:
    parameters:
      - $ref: '#/components/parameters/TpsObjectId'
    delete:
      summary: Delete a Policy Attribute Object
      operationId: deletePao
      tags: [Tps]
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      summary: Retrieve a Policy Attribute Object
      operationId: getPao
      tags: [Tps]
      responses:
        '200':
          description: Policy retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TpsPaoGetResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    patch:
      summary: Update the policies of a Policy Attribute Object
      description: |
        Update modifies the policies of a PAO. You can only modify the attributes set on
        the PAO; you can not directly modify the effective attributes. The effective attributes
        are recomputed based on the modified attributes. First, the attributes to be removed are
        processed. Second, the attribute to be added are processed. If there are conflicts at this
        point, the operation fails and no change is made, even if the updateMode is ENFORCE_CONFLICT.
        Third, the effective attributes are recomputed for the PAO. If the updateMode is DRY_RUN, the
        update is computed, but no changes are made. If the updateMode is FAIL_ON_CONFLICT, the
        change is applied if there are no conflicts. If the updateMode is ENFORCE_CONFLICT, then
        conflicts during the recomputing of effective attributes are allowed and are propagated
        to any PAOs dependent on this PAO. With great power comes great responsibility.
      operationId: updatePao
      tags: [Tps]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TpsPaoUpdateRequest'
      responses:
        '200':
          description: Update successfully processed. The update itself may or may not have succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TpsPaoUpdateResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'

    put:
      summary: Replace the policies of a Policy Attribute Object
      description: |
        Replaces all of the policies of a PAO with a new set of attributes. This only  
        modifies the attributes set on the PAO; you can not directly modify
        the effective attributes. The effective attributes are recomputed based on
        the modified attributes. If the updateMode is DRY_RUN, the
        update is computed, but no changes are made. If the updateMode is FAIL_ON_CONFLICT, the
        change is applied if there are no conflicts. If the updateMode is ENFORCE_CONFLICT, then
        conflicts during the recomputing of effective attributes are allowed and are propagated
        to any PAOs dependent on this PAO. With great power comes great responsibility.
      operationId: replacePao
      tags: [Tps]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TpsPaoReplaceRequest'
      responses:
        '200':
          description: Update successfully processed. The update itself may or may not have succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TpsPaoUpdateResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/policy/v1alpha1/pao/{objectId}/explain:
    parameters:
      - $ref: '#/components/parameters/TpsObjectId'
      - $ref: '#/components/parameters/TpsDepth'
    get:
      summary: Get an explanation of the source of policies
      operationId: explainPao
      tags: [Tps]
      responses:
        '200':
          description: Policy explanation produced successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TpsPaoExplainResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'


  /api/policy/v1alpha1/pao/{objectId}/link:
    parameters:
      - $ref: '#/components/parameters/TpsObjectId'
    post:
      summary: Link a policy attribute object to another policy attribute object
      description: |
        The target policy attribute object (PAO) is identified by the path parameter.
        The source PAO is provided in the source request. The target PAO is made to
        depend on the source PAO. The target PAO effective policy is the combination of
        its policy attributes and all of its linked PAO's effective policy attributes.
        If the updateMode is DRY_RUN, then the link calculation is made, but no action
        is taken. If the updateMode is FAIL_ON_CONFLICT, then the change is applied if there
        are no conflicts. ENFORCE_CONFLICT is not allowed on link.
      operationId: linkPao
      tags: [Tps]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TpsPaoSourceRequest'
      responses:
        '200':
          description: Link successfully processed. The link itself may or may not have succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TpsPaoUpdateResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/policy/v1alpha1/pao/{objectId}/merge:
    parameters:
      - $ref: '#/components/parameters/TpsObjectId'
    post:
      summary: Merge a policy attribute object into another policy attribute object
      description: |
        The target policy attribute object (PAO) is identified by the path parameter.
        The source PAO is provided in the source request. The policies from the source
        PAO are merged into the target PAO.
        If the updateMode is DRY_RUN, then the merge calculation is made, but no action
        is taken. If the updateMode is FAIL_ON_CONFLICT, then the change is applied if there
        are no conflicts. ENFORCE_CONFLICT is not allowed on merge.
      operationId: mergePao
      tags: [Tps]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TpsPaoSourceRequest'
      responses:
        '200':
          description: Merge successfully processed. The merge itself may or may not have succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TpsPaoUpdateResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/policy/v1alpha1/location:
    parameters:
      - $ref: '#/components/parameters/Platform'
      - $ref: '#/components/parameters/Location'
    get:
      summary: Query to explore the region ontology. Find more information about what is inside of a given location (e.g. usa, europe)
      operationId: getLocationInfo
      tags: [Tps]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TpsLocation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/policy/v1alpha1/location/regions:
    parameters:
    - $ref: '#/components/parameters/Platform'
    - $ref: '#/components/parameters/Location'
    get:
      summary: Get the list of all regions inside of a geographic location.
      operationId: getRegions
      tags: [Tps]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TpsRegions'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/policy/v1alpha1/region/{objectId}/evaluate:
    parameters:
      - $ref: '#/components/parameters/TpsObjectId'
      - $ref: '#/components/parameters/Region'
      - $ref: '#/components/parameters/Platform'
    get:
      summary: Evaluate whether a region is available inside of a location constraint
      operationId: validateRegionAllowed
      tags: [Tps]
      responses:
        '204':
          description: Region evaluated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/policy/v1alpha1/region/{objectId}/list-valid:
    parameters:
    - $ref: '#/components/parameters/TpsObjectId'
    - $ref: '#/components/parameters/Platform'
    get:
      summary: Retrieve a list of regions allowed by the policy.
      operationId: listValidRegions
      tags: [Tps]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TpsRegions'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/policy/v1alpha1/location/list-valid:
    parameters:
    - $ref: '#/components/parameters/Platform'
    post:
      summary: Retrieve the list of regions allowed for the policy inputs
      operationId: listValidByPolicyInput
      tags: [Tps]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TpsPolicyInputs'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TpsRegions'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  parameters:
    Region:
      name: region
      in: query
      description: The TPS id of a region
      required: true
      schema:
        type: string

    Platform:
      name: platform
      in: query
      description: The cloud platform (gcp, azure)
      required: true
      schema:
        type: string
        enum: ["gcp", "azure"]

    Location:
      name: location
      in: query
      description: The geographic location to query (e.g. usa, europe, iowa)
      required: false
      schema:
        type: string

    TpsObjectId:
      name: objectId
      in: path
      description: A UUID to used to identify a policy attribute object in the TPS
      required: true
      schema:
        $ref: '#/components/schemas/TpsObjectId'

    TpsDepth:
      name: depth
      in: query
      description: |
        The number of levels of policy sources to traverse. Defaults to 1. 0 means return all levels.
      required: false
      schema:
        $ref: '#/components/schemas/TpsDepth'

  responses:
    # Error Responses
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    PermissionDenied:
      description: Permission denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    NotFound:
      description: Not found (or unauthorized)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    SystemStatusResponse:
      description: A JSON description of the subsystems and their statuses.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SystemStatus'

  schemas:
    # Terra common schemas
    ErrorReport:
      type: object
      required: [message, statusCode, causes]
      properties:
        message:
          type: string
        statusCode:
          type: integer
        causes:
          type: array
          items:
            type: string

    VersionProperties:
      type: object
      properties:
        gitTag:
          type: string
        gitHash:
          type: string
        github:
          type: string
        build:
          type: string

    SystemStatus:
      required: [ ok, systems ]
      type: object
      properties:
        ok:
          type: boolean
          description: whether any system(s) need attention
        systems:
          type: object
          additionalProperties:
            type: object
            properties:
              ok:
                type: boolean
              messages:
                type: array
                items:
                  type: string

    # Please keep alphabetized
    TpsComponent:
      type: string
      description: Enum representing a policy-bearing Terra component.
      enum: [ 'WSM' ]

    TpsRegions:
      type: array
      description: List of regions (e.g. us-central1)
      items:
        uniqueItems: true
        type: string

    TpsDepth:
      type: integer
      description: Explain source depth.
      minimum: 0
      default: 1

    TpsObjectId:
      description: |
        The Terra object associated with this PAO; for example, a workspace UUID associated 
        with its policy attribute object. Since these are UUIDs, they will not conflict even 
        they are generated by different Terra components.
      type: string
      format: uuid

    TpsObjectType:
      type: string
      description: Enum representing an object type of a policy-bearing Terra component.
      enum: [ 'workspace' ]

    TpsPaoCreateRequest:
      type: object
      required: [objectId, component, objectType]
      properties:
        objectId:
          $ref: '#/components/schemas/TpsObjectId'
        component:
          $ref: '#/components/schemas/TpsComponent'
        objectType:
          $ref: '#/components/schemas/TpsObjectType'
        attributes:
          $ref: '#/components/schemas/TpsPolicyInputs'

    TpsPaoExplainResult:
      type: object
      required: [depth, objectId, component, objectType]
      properties:
        depth:
          $ref: '#/components/schemas/TpsDepth'
        objectId:
          $ref: '#/components/schemas/TpsObjectId'
        explainObjects:
          description: List of TpsPolicySource objects referenced in the explanation
          type: array
          items:
            $ref: '#/components/schemas/TpsPolicyExplainSource'
        explanation:
          description: One explanation for each policy in the effective policies array
          type: array
          items:
            $ref: '#/components/schemas/TpsPolicyExplanation'

    TpsPolicyExplanation:
      description: |
        Explanation of one policy input, providing the input and the sources
        that were combined to result in the policy. One of the sources can be the
        requested object itself. The policyExplanations may be empty/not present if
        this is a leaf in the explain graph.
      type: object
      required: [objectId, policyInput]
      properties:
        objectId:
          $ref: '#/components/schemas/TpsObjectId'
        policyInput:
          $ref: '#/components/schemas/TpsPolicyInput'
        policyExplanations:
          type: array
          items:
            $ref: '#/components/schemas/TpsPolicyExplanation'

    TpsPolicyExplainSource:
      type: object
      properties:
        objectId:
          $ref: '#/components/schemas/TpsObjectId'
        component:
          $ref: '#/components/schemas/TpsComponent'
        objectType:
          $ref: '#/components/schemas/TpsObjectType'
        deleted:
          description: Policy source has been deleted. Policies from the source still apply.
          type: boolean
        createdDate:
          description: Timestamp when the policy object was created; ISO 8601 full-date format
          type: string
        lastUpdatedDate:
          description: |
            Timestamp where the policy was last updated. Updates may be direct changes
            to this policy object or indirect changes coming from source policy objects.
            ISO 8601 full-date format
          type: string

    TpsPaoGetResult:
      type: object
      required: [objectId, component, objectType]
      properties:
        objectId:
          $ref: '#/components/schemas/TpsObjectId'
        component:
          $ref: '#/components/schemas/TpsComponent'
        objectType:
          $ref: '#/components/schemas/TpsObjectType'
        attributes:
          $ref: '#/components/schemas/TpsPolicyInputs'
        effectiveAttributes:
          $ref: '#/components/schemas/TpsPolicyInputs'
        deleted:
          type: boolean
        sourcesObjectIds:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/TpsObjectId'
        createdDate:
          description: Timestamp when the policy object was created; ISO 8601 full-date format
          type: string
        lastUpdatedDate:
          description: |
            Timestamp where the policy was last updated. Updates may be direct changes
            to this policy object or indirect changes coming from source policy objects.
            ISO 8601 full-date format
          type: string

    TpsPolicyInputs:
      type: object
      required: [inputs]
      properties:
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/TpsPolicyInput'

    TpsPolicyInput:
      type: object
      required: [namespace, name]
      properties:
        namespace:
          description: Namespace of the policy input; e.g., 'terra'
          type: string
        name:
          description: Name of the policy input; e.g., 'region-constraint'
          type: string
        additionalData:
          description: Key-value pairs of additional data
          type: array
          items:
            $ref: '#/components/schemas/TpsPolicyPair'

    TpsPolicyPair:
      description: Container for key-value pairs of policy inputs
      type: object
      properties:
        key:
          type: string
        value:
          type: string

    TpsPaoDescription:
      type: object
      description: Description of a PAO
      required: [ objectId, component, objectType ]
      properties:
        objectId:
          $ref: '#/components/schemas/TpsObjectId'
        component:
          $ref: '#/components/schemas/TpsComponent'
        objectType:
          $ref: '#/components/schemas/TpsObjectType'

    TpsPaoConflict:
      type: object
      description: |
        Describes a policy conflict between two PAOs. TargetPao is the pao with the conflict.
        ConflictPao is the pao causing the conflict.
      required: [targetPao, conflictPao, namespace, name]
      properties:
        namespace:
          description: Namespace of the conflicting policy; e.g., terra
          type: string
        name:
          description: Name of the conflicting policy; e.g., group-constraint
          type: string
        targetPao:
          $ref: '#/components/schemas/TpsPaoDescription'
        conflictPao:
          $ref: '#/components/schemas/TpsPaoDescription'

    TpsPaoReplaceRequest:
      description: Replace request body
      type: object
      required: [updateMode]
      properties:
        newAttributes:
          $ref: '#/components/schemas/TpsPolicyInputs'
        updateMode:
          $ref: '#/components/schemas/TpsUpdateMode'

    TpsPaoSourceRequest:
      description: Request structure shared by link and merge
      type: object
      required: [sourceObjectId, updateMode]
      properties:
        sourceObjectId:
          $ref: '#/components/schemas/TpsObjectId'
        updateMode:
          $ref: '#/components/schemas/TpsUpdateMode'

    TpsPaoUpdateRequest:
      description: Update request body
      type: object
      required: [updateMode]
      properties:
        removeAttributes:
          $ref: '#/components/schemas/TpsPolicyInputs'
        addAttributes:
          $ref: '#/components/schemas/TpsPolicyInputs'
        updateMode:
          $ref: '#/components/schemas/TpsUpdateMode'

    TpsPaoUpdateResult:
      type: object
      required: [updateApplied, conflicts]
      properties:
        updateApplied:
          description: |
            true if the update was applied; false if it was not. The response code will be 200
            even if the update was not applied.
          type: boolean
        resultingPao:
          description: |
            resulting PAO; this reflects the state of the PAO as it would be if the update
            was applied. It does not necessarily reflect the PAO state in Terra Policy Service
          $ref: '#/components/schemas/TpsPaoGetResult'
        conflicts:
          description: |
            list of conflicts; may be present on success or failure, depending on the updateMode setting
          type: array
          items:
            $ref: '#/components/schemas/TpsPaoConflict'

    TpsLocation:
      description: Location object description.
      type: object
      properties:
          name:
            description: The geographic location name (e.g. europe, iowa)
            type: string
          description:
            description: The geographic location description (e.g. Europe, Iowa)
            type: string
          locations:
            description: Sub-locations contained within this region.
            type: array
            items:
              $ref: '#/components/schemas/TpsLocation'
          regions:
            $ref: '#/components/schemas/TpsRegions'

    TpsUpdateMode:
      type: string
      description: |
        Enum controlling how policy updates are processed.
        DRY_RUN - conflict checking is done, but no updates are done
        FAIL_ON_CONFLICT - updates are made if there are no conflicts
        ENFORCE_CONFLICT - updates are made and conflicts are propagated
          to policy dependents. (Only valid on policy update.)
      enum: [ 'DRY_RUN', 'FAIL_ON_CONFLICT', 'ENFORCE_CONFLICT' ]


  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer


security:
  - bearerAuth: [ ]
