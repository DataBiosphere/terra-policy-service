import java.time.ZonedDateTime

def artifactory_repo_key = System.getenv("ARTIFACTORY_REPO_KEY") != null ? System.getenv("ARTIFACTORY_REPO_KEY") : 'libs-snapshot-local'
def artifactory_username = System.getenv('ARTIFACTORY_USERNAME')
def artifactory_password = System.getenv('ARTIFACTORY_PASSWORD')

java {
    // Builds sources into the published package as part of the 'assemble' task.
    withSourcesJar()
}

publishing {
    publications {
        terraPolicyService(MavenPublication) {
            artifactId = "terra-policy-service"
            from components.java
            versionMapping {
                usage("java-runtime") {
                    fromResolutionResult()
                }
            }
        }
    }
}

artifactory {
    publish {
        contextUrl = 'https://broadinstitute.jfrog.io/broadinstitute/'
        repository {
            repoKey = "${artifactory_repo_key}"
            username = "${artifactory_username}"
            password = "${artifactory_password}"
        }
        defaults {
            publications('terraPolicyService')
            publishArtifacts = true
            publishPom = true
        }
    }
}

// Download and extract the Cloud Profiler Java Agent
ext {
    // where to place the Cloud Profiler agent in the container
    cloudProfilerLocation = "/opt/cprof"

    // location for jib extras, including the Java agent
    jibExtraDirectory = "${buildDir}/jib-agents"
}
task downloadProfilerAgent(type: Download) {
    // where to download the Cloud Profiler agent https://cloud.google.com/profiler/docs/profiling-java
    src "https://storage.googleapis.com/cloud-profiler/java/latest/profiler_java_agent.tar.gz"
    dest "${buildDir}/cprof_java_agent_gce.tar.gz"
}
task extractProfilerAgent(dependsOn: downloadProfilerAgent, type: Copy) {
    from tarTree(downloadProfilerAgent.dest)
    into "${jibExtraDirectory}/${cloudProfilerLocation}"
}

jib {
    from {
        // see https://github.com/broadinstitute/dsp-appsec-blessed-images/tree/main/jre
        image = "us.gcr.io/broad-dsp-gcr-public/base/jre:17-distroless"
    }
    extraDirectories {
        paths = [file(jibExtraDirectory)]
    }
    container {
        filesModificationTime = ZonedDateTime.now().toString() // to prevent ui caching
        mainClass = 'bio.terra.policy.app.PolicySpringApplication'
        jvmFlags = [
                "-agentpath:" + cloudProfilerLocation + "/profiler_java_agent.so=" +
                        "-cprof_service=bio.terra.policy" +
                        ",-cprof_service_version=" + version +
                        ",-cprof_enable_heap_sampling=true" +
                        ",-logtostderr" +
                        ",-minloglevel=2"
        ]
    }
}

tasks.jib.dependsOn extractProfilerAgent
tasks.jibDockerBuild.dependsOn extractProfilerAgent
tasks.jibBuildTar.dependsOn extractProfilerAgent
